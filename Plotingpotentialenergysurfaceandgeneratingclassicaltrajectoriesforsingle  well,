import matplotlib.pyplot as plt
plt.style.use('seaborn-white')
from matplotlib.widgets import Button, Slider
import numpy as np


def f(x,y):
   return 1/2*(x**2 + y**2)

def ax(x):
   return -k*x
def ay(y):
   return -k*y

k = 1


#intial position
def_x0 = 0
def_y0 = 0
def_vx0 = 0
def_vy0 =0
def_dt = 0.01
def_N = 10000




def trajectory(x0,y0,vx0,vy0,dt,N):
   x = np.zeros(N + 1,dtype=np.float64)
   y = np.zeros(N + 1,dtype=np.float64)
   vx = np.zeros(N + 1,dtype=np.float64)
   vy = np.zeros(N + 1,dtype=np.float64)
   x[0] = x0
   y[0] = y0
   vx[0] = vx0
   vy[0] = vy0

   for i in range (0,N):
        x[i+1] = x[i] + vx[i]*dt + 1/2*ax(x[i])*dt**2
        y[i+1] = y[i] + vy[i]*dt + 1/2*ay(y[i])*dt**2

        vx[i+1] = vx[i] +1/2*(ax(x[i])+ax(x[i+1]))*dt
        vy[i+1] = vy[i] +1/2*(ay(y[i])+ay(y[i+1]))*dt
        
   return x,y

x1 = np.linspace(-1.5,1.5,200)
y1 = np.linspace(-1.5,1.5,200)

X,Y = np.meshgrid(x1,y1)
Z = f(X,Y)
# Create the figure and the line that we will manipulate
fig, axe = plt.subplots()
fig.set_size_inches(8,6)
axe.contour(X,Y,Z, colors = 'black')
x , y= trajectory(def_x0,def_y0,def_vx0,def_vy0,def_dt,def_N)
line, = axe.plot(x,y)
scatter = axe.scatter(def_x0,def_y0,color = 'r')


# adjust the main plot to make room for the sliders
fig.subplots_adjust(left=0.2, bottom=0.2)

# Make a horizontal slider to control the frequency.
ax_x0 = fig.add_axes([0.25, 0.1, 0.65, 0.03])
x0_slider = Slider(
    ax=ax_x0,
    label='x0',
    valmin=-1.5,
    valmax=1.5,
    valinit=def_x0,
)
ax_vx0 = fig.add_axes([0.25, 0.05, 0.65, 0.03])
vx0_slider = Slider(
    ax=ax_vx0,
    label='vx0',
    valmin=-1.5,
    valmax= 1.5,
    valinit=def_vx0,
)


# Make a vertically oriented slider to control the amplitude
ax_y0 = fig.add_axes([0.1, 0.25, 0.0225, 0.63])
y0_slider = Slider(
    ax=ax_y0,
    label="y0",
    valmin=-1.5,
    valmax=1.5,
    valinit=def_y0,
    orientation="vertical"
)

ax_vy0 = fig.add_axes([0.05, 0.25, 0.0225, 0.63])
vy0_slider = Slider(
    ax=ax_vy0,
    label='vy0',
    valmin=-1.5,
    valmax= 1.5,
    valinit=def_vy0,
    orientation="vertical"
)
# The function to be called anytime a slider's value changes
def update(val):
    x0 = x0_slider.val
    y0 = y0_slider.val
    vx0 = vx0_slider.val
    vy0 = vy0_slider.val
    dt = def_dt
    N = def_N
    x,y = trajectory(x0,y0,vx0,vy0,dt,N)
    line.set_xdata(x)
    line.set_ydata(y)
    scatter.set_offsets((x0,y0))
    fig.canvas.draw_idle()


# register the update function with each slider
x0_slider.on_changed(update)
y0_slider.on_changed(update)
vy0_slider.on_changed(update)
vx0_slider.on_changed(update)

# Create a `matplotlib.widgets.Button` to reset the sliders to initial values.
resetax = fig.add_axes([0.8, 0.9, 0.1, 0.04])
button = Button(resetax, 'Reset', hovercolor='0.975')


def reset(event):
    x0_slider.reset()
    y0_slider.reset()
    vx0_slider.reset()
    vy0_slider.reset()
button.on_clicked(reset)

plt.show()
